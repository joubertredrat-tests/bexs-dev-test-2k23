// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/exchange.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=internal/domain/exchange.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "joubertredrat/bexs-dev-test-2k23/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExchange is a mock of Exchange interface.
type MockExchange struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeMockRecorder
}

// MockExchangeMockRecorder is the mock recorder for MockExchange.
type MockExchangeMockRecorder struct {
	mock *MockExchange
}

// NewMockExchange creates a new mock instance.
func NewMockExchange(ctrl *gomock.Controller) *MockExchange {
	mock := &MockExchange{ctrl: ctrl}
	mock.recorder = &MockExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchange) EXPECT() *MockExchangeMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockExchange) Convert(ctx context.Context, amount domain.Amount, currency domain.Currency) (domain.Amount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", ctx, amount, currency)
	ret0, _ := ret[0].(domain.Amount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert.
func (mr *MockExchangeMockRecorder) Convert(ctx, amount, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockExchange)(nil).Convert), ctx, amount, currency)
}
