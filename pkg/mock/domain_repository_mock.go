// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=internal/domain/repository.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "joubertredrat/bexs-dev-test-2k23/internal/domain"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockPartnerRepository is a mock of PartnerRepository interface.
type MockPartnerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerRepositoryMockRecorder
}

// MockPartnerRepositoryMockRecorder is the mock recorder for MockPartnerRepository.
type MockPartnerRepositoryMockRecorder struct {
	mock *MockPartnerRepository
}

// NewMockPartnerRepository creates a new mock instance.
func NewMockPartnerRepository(ctrl *gomock.Controller) *MockPartnerRepository {
	mock := &MockPartnerRepository{ctrl: ctrl}
	mock.recorder = &MockPartnerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerRepository) EXPECT() *MockPartnerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPartnerRepository) Create(ctx context.Context, partner domain.Partner) (domain.Partner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, partner)
	ret0, _ := ret[0].(domain.Partner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPartnerRepositoryMockRecorder) Create(ctx, partner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPartnerRepository)(nil).Create), ctx, partner)
}

// GetByDocument mocks base method.
func (m *MockPartnerRepository) GetByDocument(ctx context.Context, document string) (domain.Partner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDocument", ctx, document)
	ret0, _ := ret[0].(domain.Partner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDocument indicates an expected call of GetByDocument.
func (mr *MockPartnerRepositoryMockRecorder) GetByDocument(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDocument", reflect.TypeOf((*MockPartnerRepository)(nil).GetByDocument), ctx, document)
}

// GetByID mocks base method.
func (m *MockPartnerRepository) GetByID(ctx context.Context, ID string) (domain.Partner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, ID)
	ret0, _ := ret[0].(domain.Partner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPartnerRepositoryMockRecorder) GetByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPartnerRepository)(nil).GetByID), ctx, ID)
}

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentRepository) Create(ctx context.Context, payment domain.Payment) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, payment)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPaymentRepositoryMockRecorder) Create(ctx, payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentRepository)(nil).Create), ctx, payment)
}

// GetByID mocks base method.
func (m *MockPaymentRepository) GetByID(ctx context.Context, ID string) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, ID)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPaymentRepositoryMockRecorder) GetByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPaymentRepository)(nil).GetByID), ctx, ID)
}

// GetDuplicated mocks base method.
func (m *MockPaymentRepository) GetDuplicated(ctx context.Context, payment domain.Payment, seconds time.Time) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuplicated", ctx, payment, seconds)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDuplicated indicates an expected call of GetDuplicated.
func (mr *MockPaymentRepositoryMockRecorder) GetDuplicated(ctx, payment, seconds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuplicated", reflect.TypeOf((*MockPaymentRepository)(nil).GetDuplicated), ctx, payment, seconds)
}

// List mocks base method.
func (m *MockPaymentRepository) List(ctx context.Context, paginaton domain.Pagination) ([]domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, paginaton)
	ret0, _ := ret[0].([]domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPaymentRepositoryMockRecorder) List(ctx, paginaton any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPaymentRepository)(nil).List), ctx, paginaton)
}
